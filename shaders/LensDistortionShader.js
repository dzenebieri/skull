export const LensDistortionShader={defines:{BAND_MODE:2,CHROMA_SAMPLES:1},uniforms:{tDiffuse:{value:null},baseIor:{value:.075},bandOffset:{value:.003},jitterIntensity:{value:1},jitterOffset:{value:0}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 viewDir;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tviewDir = normalize( ( modelViewMatrix * vec4( position, 1.0 ) ).xyz );\n\n\t\t}\n\n\t",fragmentShader:"\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 viewDir;\n\t\tuniform float baseIor;\n\t\tuniform float bandOffset;\n\t\tuniform float jitterIntensity;\n\t\tuniform float jitterOffset;\n\t\tuniform sampler2D tDiffuse;\n\n\t\t#include <common>\n\t\tvoid main() {\n\n\t\t\tvec3 normal = vec3( ( 2.0 * vUv - vec2( 1.0 ) ), 1.0 );\n\t\t\tnormal.z = 1.0;\n\t\t\tnormal = normalize( normal );\n\n\t\t\tvec3 color;\n\n\t\t\t// if NO BANDS\n\t\t\t#if BAND_MODE == 0\n\n\t\t\tvec3 refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor );\n\t\t\tcolor = texture2D( tDiffuse, vUv + refracted.xy ).rgb;\n\n\t\t\t// if RGB or RYGCBV BANDS\n\t\t\t#else\n\n\t\t\tfloat index, randValue, offsetValue;\n\t\t\tfloat r, g, b, r_ior, g_ior, b_ior;\n\t\t\tvec3 r_refracted, g_refracted, b_refracted;\n\t\t\tvec4 r_sample, g_sample, b_sample;\n\n\t\t\t#if BAND_MODE == 2\n\t\t\tfloat y, c, v, y_ior, c_ior, v_ior;\n\t\t\tvec3 y_refracted, c_refracted, v_refracted;\n\t\t\tvec4 y_sample, c_sample, v_sample;\n\t\t\t#endif\n\n\t\t\tfor ( int i = 0; i < CHROMA_SAMPLES; i ++ ) {\n\n\t\t\t\tindex = float( i );\n\t\t\t\trandValue = rand( sin( index + 1. ) * gl_FragCoord.xy + vec2( jitterOffset, - jitterOffset ) ) - 0.5;\n\t\t\t\toffsetValue = index / float( CHROMA_SAMPLES ) + randValue * jitterIntensity;\n\t\t\t\t#if BAND_MODE == 1\n\t\t\t\trandValue *= 2.0;\n\t\t\t\t#endif\n\n\t\t\t\t// Paper describing functions for creating yellow, cyan, and violet bands and reforming\n\t\t\t\t// them into RGB:\n\t\t\t\t// https://web.archive.org/web/20061108181225/http://home.iitk.ac.in/~shankars/reports/dispersionraytrace.pdf\n\t\t\t\tr_ior = 1.0 + bandOffset * ( 0.0 + offsetValue );\n\t\t\t\tg_ior = 1.0 + bandOffset * ( 2.0 + offsetValue );\n\t\t\t\tb_ior = 1.0 + bandOffset * ( 4.0 + offsetValue );\n\n\t\t\t\tr_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / r_ior );\n\t\t\t\tg_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / g_ior );\n\t\t\t\tb_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / b_ior );\n\n\t\t\t\tr_sample = texture2D( tDiffuse, vUv + r_refracted.xy );\n\t\t\t\tg_sample = texture2D( tDiffuse, vUv + g_refracted.xy );\n\t\t\t\tb_sample = texture2D( tDiffuse, vUv + b_refracted.xy );\n\n\t\t\t\t#if BAND_MODE == 2\n\t\t\t\ty_ior = 1.0 + bandOffset * ( 1.0 + offsetValue );\n\t\t\t\tc_ior = 1.0 + bandOffset * ( 3.0 + offsetValue );\n\t\t\t\tv_ior = 1.0 + bandOffset * ( 5.0 + offsetValue );\n\n\t\t\t\ty_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / y_ior );\n\t\t\t\tc_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / c_ior );\n\t\t\t\tv_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / v_ior );\n\n\t\t\t\ty_sample = texture2D( tDiffuse, vUv + y_refracted.xy );\n\t\t\t\tc_sample = texture2D( tDiffuse, vUv + c_refracted.xy );\n\t\t\t\tv_sample = texture2D( tDiffuse, vUv + v_refracted.xy );\n\n\t\t\t\tr = r_sample.r / 2.0;\n\t\t\t\ty = ( 2.0 * y_sample.r + 2.0 * y_sample.g - y_sample.b ) / 6.0;\n\t\t\t\tg = g_sample.g / 2.0;\n\t\t\t\tc = ( 2.0 * c_sample.g + 2.0 * c_sample.b - c_sample.r ) / 6.0;\n\t\t\t\tb = b_sample.b / 2.0;\n\t\t\t\tv = ( 2.0 * v_sample.b + 2.0 * v_sample.r - v_sample.g ) / 6.0;\n\n\t\t\t\tcolor.r += r + ( 2.0 * v + 2.0 * y - c ) / 3.0;\n\t\t\t\tcolor.g += g + ( 2.0 * y + 2.0 * c - v ) / 3.0;\n\t\t\t\tcolor.b += b + ( 2.0 * c + 2.0 * v - y ) / 3.0;\n\t\t\t\t#else\n\t\t\t\tcolor.r += r_sample.r;\n\t\t\t\tcolor.g += g_sample.g;\n\t\t\t\tcolor.b += b_sample.b;\n\t\t\t\t#endif\n\n\t\t\t}\n\n\t\t\tcolor /= float( CHROMA_SAMPLES );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( color, 1.0 );\n\n\t\t}\n\n\t"};